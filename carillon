#!/usr/bin/env python3
import configparser
import json
import os
import re
import signal
import subprocess

import urwid


class Display:
    def __init__(self):
        self.title = urwid.Edit('Title: ')
        self.composer = urwid.Edit('Composer: ')
        self.live = urwid.CheckBox('Live')

        self.update_button = urwid.Button('Update', self.update)
        self.clear_button = urwid.Button('Clear', self.clear)
        self.buttons = urwid.Columns([(10, self.update_button), urwid.Divider(), (9, self.clear_button)])
        self.feedback = urwid.Text('', align='center')
        self.feedback_timer = -1

        self.pile = urwid.Pile([self.title, self.composer, self.live, urwid.Divider(), self.buttons, urwid.Divider(), self.feedback])

        self.loop = urwid.MainLoop(urwid.Filler(urwid.Padding(self.pile, width=40, align='center')))

        self.last_mtime = 0

        self.exiting = False

        self.clear()
        self.feedback_timer = 0
        self.refresh()

    def run(self):
        self.loop.run()

    def exit(self):
        self.exiting = True

    def refresh(self, _=None, __=None):
        mtime = os.stat('www/stream/metadata.json').st_mtime
        if mtime > self.last_mtime:
            self.last_mtime = mtime

            with open('www/stream/metadata.json', 'r') as file:
                data = json.loads(file.read())
                self.live.state = data['live']
                self.title.edit_text = data['title']
                self.composer.edit_text = data['composer']

        if self.feedback_timer == 0:
            self.feedback.set_text('')

        if self.feedback_timer >= 0:
            self.feedback_timer -= 1

        if self.exiting:
            raise urwid.ExitMainLoop()

        self.loop.set_alarm_in(1, self.refresh)

    def update(self, _=None):
        with open('www/stream/metadata.json', 'w') as file:
            file.write(json.dumps({'live': self.live.state, 'title': self.title.edit_text, 'composer': self.composer.edit_text}))

        self.feedback.set_text('Stream metadata updated!')
        self.feedback_timer = 3

    def clear(self, _=None):
        self.title.set_edit_text('None')
        self.composer.set_edit_text('None')
        self.live.set_state(False)

        self.update(_)


class Logs:
    def __init__(self, components):
        self.components = components

        self.logs = {}

    def __enter__(self):
        for component, spec in self.components.items():
            self.logs[component] = open(spec['log'], 'a')

        for log in self.logs.values():
            print(file=log)
            print('==============', file=log)
            print('Starting Radio', file=log)
            print('==============', file=log)
            print(file=log)
            log.flush()

        return self.logs

    def __exit__(self, _, __, ___):
        for log in self.logs.values():
            try:
                log.close()
            except Exception:
                pass


class Phase:
    class Manager:
        def __init__(self, phase):
            self.components = phase.components
            self.logs = phase.logs
            self.phase = phase.phase

            self.runtime = {}

        def start(self):
            try:
                for component, spec in self.components.items():
                    if self.phase in spec:
                        self.runtime[component] = {
                            'proc': None,
                            'errors': [],
                        }

                        if callable(spec[self.phase]):
                            try:
                                spec[self.phase]()
                            except Exception:
                                import traceback
                                self.logs[component].write(traceback.format_exc())
                                self.logs[component].flush()
                                self.runtime[component]['errors'].append(('(<function>)', spec[self.phase].__name__))
                        elif isinstance(spec[self.phase], list):
                            self.runtime[component]['proc'] = subprocess.Popen(spec[self.phase], stdout=self.logs[component], stderr=subprocess.STDOUT, cwd=spec['cwd'])
                        elif isinstance(spec[self.phase], str):
                            self.runtime[component]['proc'] = subprocess.Popen(spec[self.phase], shell=True, stdout=self.logs[component], stderr=subprocess.STDOUT, cwd=spec['cwd'])
                        else:
                            raise TypeError(f'{self.phase!r} in component {component!r} must be callable, list, or str')
            except Exception:
                self.terminate()
                raise

        def wait(self):
            for data in self.runtime.values():
                if data['proc']:
                    data['proc'].wait()

        def gather(self):
            for component, data in self.runtime.items():
                if data['proc']:
                    ret = data['proc'].poll()
                    if 'ok' in self.components[component]:
                        if ret in self.components[component]['ok']:
                            ret = 0
                    if ret:
                        data['errors'].append((f'(exit code: {ret})', data['proc'].args))

            errors = []

            for component, data in self.runtime.items():
                errors.extend([(self.components[component]['name'], *error) for error in data['errors']])

            if errors:
                raise RuntimeError(f'component errors in phase {self.phase!r}:\n\t' + '\n\t'.join(f'{name} - {ret} {cmd!r}' for name, ret, cmd in errors))

        def terminate(self):
            for data in self.runtime.values():
                try:
                    data['proc'].terminate()
                    data['proc'].wait()
                except Exception:
                    pass

        def run(self):
            self.start()
            self.wait()
            self.gather()

    def __init__(self, components, logs, phase):
        self.components = components
        self.logs = logs
        self.phase = phase

        self.manager = None

    def __enter__(self):
        self.manager = Phase.Manager(self)
        return self.manager

    def __exit__(self, _, __, ___):
        if self.manager:
            self.manager.terminate()


os.chdir(os.path.dirname(__file__))


config = configparser.ConfigParser()
config.read('conf/default.cfg')
config.read('carillon.cfg')


def caddy_generate():
    with open('conf/Caddyfile.in', 'r') as caddy_in, open('run/Caddyfile', 'w') as caddy_out:
        caddy_lines = []
        skip = None
        for line in caddy_in:
            fold = re.match(r'%%([A-Z0-9_]*)_(BEGIN|END)%%', line.strip())
            if fold:
                if fold.group(2) == 'END':
                    if fold.group(1) == skip:
                        skip = None
                elif not skip and fold.group(2) == 'BEGIN':
                    if fold.group(1) == 'TLS':
                        if config['http']['tls'] == 'off':
                            skip = 'TLS'
                    elif fold.group(1) == 'UPDATE':
                        if not config['http']['allow_update'] or config['http']['allow_update'] == 'none':
                            skip = 'UPDATE'
                continue

            if skip:
                continue

            line = line.replace('%BIND%', config['http']['bind'])
            line = line.replace('%HTTP_ADDRESS%', ', '.join('http://' + host + (f':{config["http"]["http_port"]}' if config['http']['http_port'] != '80' else '') for host in config['http']['host'].split(' ')))
            line = line.replace('%HTTPS_ADDRESS%', ', '.join('https://' + host + (f':{config["http"]["https_port"]}' if config['http']['https_port'] != '443' else '') for host in config['http']['host'].split(' ')))
            line = line.replace('%TLS%', config['http']['tls'])

            line = line.replace('%ALLOW_UPDATE%', config['http']['allow_update'])

            line = line.replace('%UPDATER_BIND%', config['updater']['bind'])
            line = line.replace('%UPDATER_PORT%', config['updater']['port'])

            line = line.replace('%UPDATER_BASE%', config['updater']['base'])

            caddy_lines.append(line)

        caddy_out.write(''.join(caddy_lines))


components = {
    'http': {
        'name': 'web server',
        'pre': caddy_generate,
        'cmd': [config['http']['command_caddy'], 'run', '--config', 'run/Caddyfile'],
        'cwd': None,
        'log': 'log/http.out',
    },
    'ffmpeg': {
        'name': 'ffmpeg',
        'cmd': [config['ffmpeg']['command_ffmpeg'], '-f', config['ffmpeg']['format'], '-i', config['ffmpeg']['device'], '-c:a', 'mp3', '-map', '0', '-flags', '-global_header', '-f', 'hls', '-hls_flags', 'delete_segments+temp_file', '-hls_segment_filename', 'stream.%03d.ts', 'stream.m3u8'],
        'ok': [0, 255],
        'cwd': 'www/stream',
        'log': 'log/ffmpeg.out',
    },
    'update': {
        'name': 'updater',
        'cmd': [config['updater']['command_npm'], 'start', '--', '-p', config['updater']['port'], '-a', config['updater']['bind'], '-r', config['updater']['proxy'], '-b', config['updater']['base']],
        'ok': [0, 130, -2],
        'cwd': 'upd',
        'log': 'log/upd.out',
    },
}


def main():
    with Logs(components) as logs, Phase(components, logs, 'pre') as pre, Phase(components, logs, 'cmd') as cmd, Phase(components, logs, 'setup') as setup, Phase(components, logs, 'post') as post:
        pre.run()

        try:
            display = Display()

            signal.signal(signal.SIGINT, lambda signum, siginfo: display.exit())
            signal.signal(signal.SIGTERM, lambda signum, siginfo: display.exit())
            signal.signal(signal.SIGCHLD, lambda signum, siginfo: display.exit())

            cmd.start()

            setup.run()

            display.run()

            cmd.gather()
        finally:
            cmd.terminate()

        post.run()


if __name__ == '__main__':
    main()
